package org.opentestsystem.delivery.testreg.rest.diagnostic;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.rest.diagnostic.client.StatusRestClient;
import org.springframework.http.MediaType;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.web.client.RestTemplate;
import tds.dll.common.diagnostic.domain.Rating;
import tds.dll.common.diagnostic.domain.Status;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.anything;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;

public class ProviderTest {
    static RestTemplate restTemplate;
    static StatusRestClient client;
    static MockRestServiceServer mockServer;

    static String successBody = statusBody("Ideal", 4);
    static String warningBody = statusBody("Warning", 2);
    static String failedBody = statusBody("Failed", 0);

    static String statusBody(String text, int rating) {
        return String.format("{\"statusText\" : \"%s\",  \"statusRating\" : %d}", text, rating);
    }

    @BeforeClass
    public static void before() {
        restTemplate = new RestTemplate();
        client = new StatusRestClient(restTemplate);
    }

    @Before
    public void setUp() {
        mockServer = MockRestServiceServer.createServer(restTemplate);
    }

    @Test
    public void idealStatus() {
        mockServer.expect(anything()).andRespond(
                withSuccess(successBody, MediaType.APPLICATION_JSON));
        Status status = client.getStatus("Proctor", "localhost");
        assertThat(status.getRating(), is(Rating.IDEAL));
    }

    @Test
    public void warnStatus() {
        mockServer.expect(anything()).andRespond(
                withSuccess(warningBody, MediaType.APPLICATION_JSON));
        Status status = client.getStatus("unit", "host");
        assertThat(status.getRating(), is(Rating.WARNING));
    }

    @Test
    public void failStatus() {
        mockServer.expect(anything()).andRespond(
                withSuccess(failedBody, MediaType.APPLICATION_JSON));
        Status status = client.getStatus("unit", "host");
        assertThat(status.getRating(), is(Rating.FAILED));
    }

    @Test
    public void idealForWarningsStatus() {
        mockServer.expect(anything()).andRespond(
                withSuccess(successBody, MediaType.APPLICATION_JSON));
        Status status = client.getWarningStatus("Proctor", "localhost");
        assertThat(status.getRating(), is(Rating.IDEAL));
    }

    @Test
    public void warnForWarningsStatus() {
        mockServer.expect(anything()).andRespond(
                withSuccess(warningBody, MediaType.APPLICATION_JSON));
        Status status = client.getWarningStatus("unit", "host");
        assertThat(status.getRating(), is(Rating.WARNING));
    }

    @Test
    public void failForWarningsStatus() {
        mockServer.expect(anything()).andRespond(
                withSuccess(failedBody, MediaType.APPLICATION_JSON));
        Status status = client.getWarningStatus("unit", "host");
        assertThat(status.getRating(), is(Rating.WARNING));
    }
}
