package org.opentestsystem.delivery.testreg.rest.diagnostic;

import org.apache.sshd.SshServer;
import org.apache.sshd.common.NamedFactory;
import org.apache.sshd.server.Command;
import org.apache.sshd.server.PasswordAuthenticator;
import org.apache.sshd.server.PublickeyAuthenticator;
import org.apache.sshd.server.command.ScpCommandFactory;
import org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider;
import org.apache.sshd.server.session.ServerSession;
import org.apache.sshd.server.sftp.SftpSubsystem;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.rest.diagnostic.client.AutoSFTPSession;
import org.opentestsystem.delivery.testreg.rest.diagnostic.client.SFTPHealthCheck;
import org.springframework.integration.sftp.session.DefaultSftpSessionFactory;

import java.io.IOException;
import java.security.PublicKey;
import java.util.Arrays;

import static org.junit.Assert.assertTrue;

public class SFTPTest {
    SshServer sshd;
    DefaultSftpSessionFactory defaultSftpSessionFactory;

    String host = "localhost";
    int port = 2222;
    String username = "unit-test-user";
    String password = "unit-test-password";
    String path = "sftp_root";


    @Before
    public void setUp() throws IOException {
        // init sftp server
        sshd = SshServer.setUpDefaultServer();
        sshd.setPort(port);
        sshd.setPasswordAuthenticator(new PasswordAuthenticator() {
            @Override
            public boolean authenticate(String username, String password, ServerSession session) {
                return true;
            }
        });
        sshd.setPublickeyAuthenticator(new PublickeyAuthenticator() {
            @Override
            public boolean authenticate(String username, PublicKey key, ServerSession session) {
                return false;
            }
        });
        sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider());
        sshd.setSubsystemFactories(Arrays.<NamedFactory<Command>>asList(new SftpSubsystem.Factory()));
        sshd.setCommandFactory(new ScpCommandFactory());

        sshd.start();

        defaultSftpSessionFactory = new DefaultSftpSessionFactory(true);
        defaultSftpSessionFactory.setPort(port);
        defaultSftpSessionFactory.setHost(host);
        defaultSftpSessionFactory.setUser(username);
        defaultSftpSessionFactory.setPassword(password);
        defaultSftpSessionFactory.setTimeout(1000);

        clean();
    }

    @After
    public void tearDown() throws InterruptedException {
        sshd.stop();

        clean();
    }

    @Test
    public void pathExists() throws Exception {
        try (AutoSFTPSession auto = new AutoSFTPSession(defaultSftpSessionFactory.getSession())) {
            auto.mkdir(path);
        }

        SFTPHealthCheck sftpHealthCheck = new SFTPHealthCheck(host, port, username, password);
        assertTrue("SFTP path does not exist.", sftpHealthCheck.pathExists(path));
    }

    private void clean() {
    }
}
