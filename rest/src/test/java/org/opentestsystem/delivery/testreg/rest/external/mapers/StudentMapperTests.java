package org.opentestsystem.delivery.testreg.rest.external.mapers;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import org.joda.time.LocalDate;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.rest.external.mappers.StudentMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;

/***
 * This class will test the mapping between @link {org.opentestsystem.delivery.testreg.rest.external.models.StudentDto} and Student @link {org.opentestsystem.delivery.testreg.domain.Student}
 */
public class StudentMapperTests {
    @Test
    public void shouldMapFromStudentToStudentDto() {
        // Using a new String instead of the constant "YES" in order to avoid equality checks using == to be true
        //  there was a bug in the mapper using value == "YES" instead of value.equals("YES") and the test would still pass without creating this new String object
        String yesValue = new String("YES");
        String zeroValue = new String("0");

        Student student = createBasicStudent();
        student.setEntityId("ssid1");
        student.setStateAbbreviation("CA");
        student.setDistrictIdentifier("DISTRICT1");
        student.setInstitutionIdentifier("INSTITUTION1");
        student.setFirstName("FIRST_NAME");
        student.setLastName("LAST_NAME");
        student.setMiddleName("MIDDLE_NAME");
        student.setBirthDate("1999-01-02");
        student.setExternalSsid("essid1");
        student.setHispanicOrLatino(yesValue);
        student.setAmericanIndianOrAlaskaNative(yesValue);
        student.setAsian(yesValue);
        student.setBlackOrAfricanAmerican(yesValue);
        student.setWhite(yesValue);
        student.setNativeHawaiianOrPacificIsland(yesValue);
        student.setTwoOrMoreRaces(yesValue);
        student.setLanguageCode("ESN");
        student.setFirstEntryDateIntoUsSchool("2003-12-20");
        student.setLepEntryDate("2004-12-20");
        student.setLepExitDate("2005-12-20");
        student.setTitle3ProgramType("DualLanguage");
        student.setPrimaryDisabilityType("AUT");
        student.setiDEAIndicator(yesValue);
        student.setSection504Status(yesValue);
        student.setLepStatus(yesValue);
        student.setTitle3ProgressStatus(zeroValue);
        student.setDisadvantageStatus(yesValue);
        student.setMigrantStatus(yesValue);

        StudentDto studentDto = StudentMapper.mapFrom(student);

        assertThat(studentDto.getSsid(), is("ssid1"));
        assertThat(studentDto.getStateAbbreviation(), is("CA"));
        assertThat(studentDto.getDistrictIdentifier(), is("DISTRICT1"));
        assertThat(studentDto.getInstitutionIdentifier(), is("INSTITUTION1"));
        assertThat(studentDto.getFirstName(), is("FIRST_NAME"));
        assertThat(studentDto.getLastName(), is("LAST_NAME"));
        assertThat(studentDto.getMiddleName(), is("MIDDLE_NAME"));
        assertThat(studentDto.getBirthDate(), is(new LocalDate("1999-01-02")));
        assertThat(studentDto.getExternalSsid(), is("essid1"));
        assertThat(studentDto.isHispanicOrLatino(), is(true));
        assertThat(studentDto.isAmericanIndianOrAlaskaNative(), is(true));
        assertThat(studentDto.isAsian(), is(true));
        assertThat(studentDto.isBlackOrAfricanAmerican(), is(true));
        assertThat(studentDto.isWhite(), is(true));
        assertThat(studentDto.isNativeHawaiianOrPacificIsland(), is(true));
        assertThat(studentDto.isTwoOrMoreRaces(), is(true));
        assertThat(studentDto.getLanguageCode(), is("ESN"));
        assertThat(studentDto.getFirstEntryDateIntoUsSchool(), is(new LocalDate("2003-12-20")));
        assertThat(studentDto.getLepEntryDate(), is(new LocalDate("2004-12-20")));
        assertThat(studentDto.getLepExitDate(), is(new LocalDate("2005-12-20")));
        assertThat(studentDto.getTitle3ProgramType(), is("DualLanguage"));
        assertThat(studentDto.getPrimaryDisabilityType(), is("AUT"));
        assertThat(studentDto.isiDEAIndicator(), is(true));
        assertThat(studentDto.isSection504Status(), is(true));
        assertThat(studentDto.isLepStatus(), is(true));
        assertThat(studentDto.getElpLevel(), is("0"));
        assertThat(studentDto.isDisadvantageStatus(), is(true));
        assertThat(studentDto.isMigrantStatus(), is(true));
    }

    private Student createBasicStudent() {
        return createBasicStudent("MALE", "05");
    }

    private Student createBasicStudent(String gender, String grade) {
        Student student = new Student();

        // these 2 values must be set or else there is a validation error that happens
        student.setGender(gender);
        student.setGradeLevelWhenAssessed(grade);

        return student;
    }
}
