package org.opentestsystem.delivery.testreg.rest.external.mapers;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.junit.Test;
import org.opentestsystem.delivery.testreg.domain.Student;
import org.opentestsystem.delivery.testreg.rest.external.mappers.StudentMapper;
import org.opentestsystem.delivery.testreg.rest.external.models.StudentDto;

/***
 * This class will test the mapping between @link {org.opentestsystem.delivery.testreg.rest.external.models.StudentDto} and Student @link {org.opentestsystem.delivery.testreg.domain.Student}
 */
public class StudentMapperTests {
    // Using a new String instead of the constant "YES" in order to avoid equality checks using == to be true
    //  there was a bug in the mapper using value == "YES" instead of value.equals("YES") and the test would still pass without creating this new String object
    String yesValue = new String("YES");
    String zeroValue = new String("0");

    @Test
    public void shouldMapFromStudentToStudentDto() {
        Student student = createBasicStudent();

        StudentDto studentDto = StudentMapper.mapFrom(student);

        assertThat(studentDto.getSsid(), is("ssid1"));
        assertThat(studentDto.getStateAbbreviation(), is("CA"));
        assertThat(studentDto.getDistrictIdentifier(), is("DISTRICT1"));
        assertThat(studentDto.getInstitutionIdentifier(), is("INSTITUTION1"));
        assertThat(studentDto.getFirstName(), is("FIRST_NAME"));
        assertThat(studentDto.getLastName(), is("LAST_NAME"));
        assertThat(studentDto.getMiddleName(), is("MIDDLE_NAME"));
        assertThat(studentDto.getBirthDate(), is(new LocalDate("1999-01-02")));
        assertThat(studentDto.getExternalSsid(), is("essid1"));
        assertThat(studentDto.isHispanicOrLatino(), is(true));
        assertThat(studentDto.isAmericanIndianOrAlaskaNative(), is(true));
        assertThat(studentDto.isAsian(), is(true));
        assertThat(studentDto.isBlackOrAfricanAmerican(), is(true));
        assertThat(studentDto.isWhite(), is(true));
        assertThat(studentDto.isNativeHawaiianOrPacificIsland(), is(true));
        assertThat(studentDto.isTwoOrMoreRaces(), is(true));
        assertThat(studentDto.getLanguageCode(), is("ESN"));
        assertThat(studentDto.getFirstEntryDateIntoUsSchool(), is(new LocalDate("2003-12-20")));
        assertThat(studentDto.getLepEntryDate(), is(new LocalDate("2004-12-20")));
        assertThat(studentDto.getLepExitDate(), is(new LocalDate("2005-12-20")));
        assertThat(studentDto.getTitle3ProgramType(), is("DualLanguage"));
        assertThat(studentDto.getPrimaryDisabilityType(), is("AUT"));
        assertThat(studentDto.isiDEAIndicator(), is(true));
        assertThat(studentDto.isSection504Status(), is(true));
        assertThat(studentDto.isLepStatus(), is(true));
        assertThat(studentDto.getElpLevel(), is("0"));
        assertThat(studentDto.isDisadvantageStatus(), is(true));
        assertThat(studentDto.isMigrantStatus(), is(true));
    }

    @Test
    public void shouldMapFromStudentDtoToStudent() {
        StudentDto studentDto = createBasicStudentDto();

        Student student = StudentMapper.mapTo(studentDto);

        assertThat(student.getEntityId(), is("ssid1"));
        assertThat(student.getStateAbbreviation(), is("CA"));
        assertThat(student.getDistrictIdentifier(), is("DISTRICT1"));
        assertThat(student.getInstitutionIdentifier(), is("INSTITUTION1"));
        assertThat(student.getFirstName(), is("FIRST_NAME"));
        assertThat(student.getLastName(), is("LAST_NAME"));
        assertThat(student.getMiddleName(), is("MIDDLE_NAME"));
        assertThat(student.getBirthDate(), is(new DateTime("1999-01-02")));
        assertThat(student.getExternalSsid(), is("essid1"));
        assertThat(student.getHispanicOrLatino(), is("YES"));
        assertThat(student.getAmericanIndianOrAlaskaNative(), is("YES"));
        assertThat(student.getAsian(), is("YES"));
        assertThat(student.getBlackOrAfricanAmerican(), is("YES"));
        assertThat(student.getWhite(), is("YES"));
        assertThat(student.getNativeHawaiianOrPacificIsland(), is("YES"));
        assertThat(student.getTwoOrMoreRaces(), is("YES"));
        assertThat(student.getLanguageCode(), is("ESN"));
        assertThat(student.getFirstEntryDateIntoUsSchool(), is(new DateTime("2003-12-20")));
        assertThat(student.getLepEntryDate(), is(new DateTime("2004-12-20")));
        assertThat(student.getLepExitDate(), is(new DateTime("2005-12-20")));
        assertThat(student.getTitle3ProgramType(), is(Student.Title3ProgramType.DUALLANGUAGE));
        assertThat(student.getPrimaryDisabilityType(), is(Student.PrimaryDisabilityType.AUT));
        assertThat(student.getiDEAIndicator(), is("YES"));
        assertThat(student.getSection504Status(), is("YES"));
        assertThat(student.getLepStatus(), is("YES"));
        assertThat(student.getTitle3ProgressStatus(), is("0"));
        assertThat(student.getDisadvantageStatus(), is("YES"));
        assertThat(student.getMigrantStatus(), is("YES"));
    }

    @Test
    public void shouldMapUnknownSection504ToNull() {
        Student student = createBasicStudent();
        student.setSection504Status("UNKNOWN");

        StudentDto studentDto = StudentMapper.mapFrom(student);

        assertThat(studentDto.isSection504Status(), is((Boolean)null));
    }

    @Test
    public void shouldMapNullSection504ToUnknown() {
        StudentDto studentDto = createBasicStudentDto();
        studentDto.setSection504Status(null);

        Student student = StudentMapper.mapTo(studentDto);

        assertThat(student.getSection504Status(), is("UNKNOWN/CANNOT PROVIDE"));
    }

    @Test
    public void shouldHandleNullDatesMappingToStudent() {
        StudentDto studentDto = createBasicStudentDto();
        studentDto.setBirthDate(null);
        studentDto.setFirstEntryDateIntoUsSchool(null);
        studentDto.setLepEntryDate(null);
        studentDto.setLepExitDate(null);

        Student student = StudentMapper.mapTo(studentDto);

        assertThat(student.getBirthDate(), is((DateTime)null));
        assertThat(student.getFirstEntryDateIntoUsSchool(), is((DateTime)null));
        assertThat(student.getLepEntryDate(), is((DateTime)null));
        assertThat(student.getLepExitDate(), is((DateTime)null));
    }

    @Test
    public void shouldHandleNullDatesMappingToStudentDto() {
        Student student = createBasicStudent();
        student.setBirthDate((String)null);
        student.setFirstEntryDateIntoUsSchool((String)null);
        student.setLepEntryDate((String)null);
        student.setLepExitDate((String)null);

        StudentDto studentDto = StudentMapper.mapFrom(student);

        assertThat(studentDto.getBirthDate(), is((LocalDate)null));
        assertThat(studentDto.getFirstEntryDateIntoUsSchool(), is((LocalDate)null));
        assertThat(studentDto.getLepEntryDate(), is((LocalDate)null));
        assertThat(studentDto.getLepExitDate(), is((LocalDate)null));
    }

    private Student createBasicStudent() {
        return createBasicStudent("MALE", "05");
    }

    private Student createBasicStudent(String gender, String grade) {
        Student student = new Student();

        // these 2 values must be set or else there is a validation error that happens
        student.setGender(gender);
        student.setGradeLevelWhenAssessed(grade);

        student.setEntityId("ssid1");
        student.setStateAbbreviation("CA");
        student.setDistrictIdentifier("DISTRICT1");
        student.setInstitutionIdentifier("INSTITUTION1");
        student.setFirstName("FIRST_NAME");
        student.setLastName("LAST_NAME");
        student.setMiddleName("MIDDLE_NAME");
        student.setBirthDate("1999-01-02");
        student.setExternalSsid("essid1");
        student.setHispanicOrLatino(yesValue);
        student.setAmericanIndianOrAlaskaNative(yesValue);
        student.setAsian(yesValue);
        student.setBlackOrAfricanAmerican(yesValue);
        student.setWhite(yesValue);
        student.setNativeHawaiianOrPacificIsland(yesValue);
        student.setTwoOrMoreRaces(yesValue);
        student.setLanguageCode("ESN");
        student.setFirstEntryDateIntoUsSchool("2003-12-20");
        student.setLepEntryDate("2004-12-20");
        student.setLepExitDate("2005-12-20");
        student.setTitle3ProgramType("DualLanguage");
        student.setPrimaryDisabilityType("AUT");
        student.setiDEAIndicator(yesValue);
        student.setSection504Status(yesValue);
        student.setLepStatus(yesValue);
        student.setTitle3ProgressStatus(zeroValue);
        student.setDisadvantageStatus(yesValue);
        student.setMigrantStatus(yesValue);

        return student;
    }

    private StudentDto createBasicStudentDto() {
        StudentDto studentDto = new StudentDto();

        // these 2 values must be set or else there is a validation error that happens
        studentDto.setSex("FEMALE");
        studentDto.setGradeLevelWhenAssessed("05");

        studentDto.setSsid("ssid1");
        studentDto.setStateAbbreviation("CA");
        studentDto.setDistrictIdentifier("DISTRICT1");
        studentDto.setInstitutionIdentifier("INSTITUTION1");
        studentDto.setFirstName("FIRST_NAME");
        studentDto.setLastName("LAST_NAME");
        studentDto.setMiddleName("MIDDLE_NAME");
        studentDto.setBirthDate(new LocalDate("1999-01-02"));
        studentDto.setExternalSsid("essid1");
        studentDto.setHispanicOrLatino(true);
        studentDto.setAmericanIndianOrAlaskaNative(true);
        studentDto.setAsian(true);
        studentDto.setBlackOrAfricanAmerican(true);
        studentDto.setWhite(true);
        studentDto.setNativeHawaiianOrPacificIsland(true);
        studentDto.setTwoOrMoreRaces(true);
        studentDto.setLanguageCode("ESN");
        studentDto.setFirstEntryDateIntoUsSchool(new LocalDate("2003-12-20"));
        studentDto.setLepEntryDate(new LocalDate("2004-12-20"));
        studentDto.setLepExitDate(new LocalDate("2005-12-20"));
        studentDto.setTitle3ProgramType("DualLanguage");
        studentDto.setPrimaryDisabilityType("AUT");
        studentDto.setiDEAIndicator(true);
        studentDto.setSection504Status(true);
        studentDto.setLepStatus(true);
        studentDto.setElpLevel("0");
        studentDto.setDisadvantageStatus(true);
        studentDto.setMigrantStatus(true);
        
        return studentDto;
    }
}
