package org.opentestsystem.delivery.testreg.rest.diagnostic.client;

import org.opentestsystem.delivery.testreg.rest.diagnostic.model.ProviderStatus;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;
import tds.dll.common.diagnostic.domain.Level;
import tds.dll.common.diagnostic.domain.Rating;
import tds.dll.common.diagnostic.domain.Status;

import java.net.MalformedURLException;
import java.util.Date;

import static java.lang.String.format;
import static org.opentestsystem.delivery.testreg.rest.diagnostic.DiagnosticUtil.*;

public class StatusRestClient {
    final private RestTemplate restTemplate;

    public StatusRestClient(final RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    // call status rest api on dependency
    protected ProviderStatus getDependencyStatus(final String url) throws MalformedURLException, RestClientException {
        // parse url for existing url components
        final UriComponents components = UriComponentsBuilder.fromUriString(url).build();
        final UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(url)
                .pathSegment("status").queryParam("level", "5");
        if (components.getHost() == null) {
            builder.scheme("http");
        }
        final String restUrl = builder.build().toString();
        return restTemplate.getForObject(restUrl, ProviderStatus.class);
    }

    /**
     * Returns the status of a dependency that exposes the "status" Rest API
     *
     * @return dependency status
     */
    public Status getStatus(final String unit, final String host) {
        final Status status = new Status(unit, Level.LEVEL_0, new Date());
        try {
            final ProviderStatus dependency = getDependencyStatus(host);
            if (dependency != null) {
                final Rating rating = getRating(dependency.getStatusText());
                switch (rating) {
                    case FAILED:
                        setStatusError(status, dependency.getError()); break;
                    case WARNING:
                        setStatusWarning(status, dependency.getWarning()); break;
                }
            } else {
                setStatusError(status, "Invalid status response.");
            }
        } catch (MalformedURLException urlEx) {
            final String message = format("%s URL format error: %s", unit, urlEx.getLocalizedMessage());
            setStatusError(status, message);
        } catch (Exception e) {
            setStatusError(status, getDependencyErrorMessage(unit, host, e));
        }
        return status;
    }

    /**
     * Returns the status of a dependency that exposes the "status" Rest API
     * If the dependency is failing, only consider it a warning
     *
     * @return dependency status
     */
    public Status getWarningStatus(final String unit, final String host) {
        final Status status = getStatus(unit, host);
        if (status.getRating().equals(Rating.FAILED)) {
            setStatusWarning(status, status.getError());
        }
        return status;
    }
}

