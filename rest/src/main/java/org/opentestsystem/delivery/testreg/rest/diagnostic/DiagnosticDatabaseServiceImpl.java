package org.opentestsystem.delivery.testreg.rest.diagnostic;

import org.opentestsystem.delivery.testreg.rest.diagnostic.client.MongoDBHealthCheck;
import org.opentestsystem.delivery.testreg.rest.diagnostic.model.LatencyTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import tds.dll.common.diagnostic.domain.*;
import tds.dll.common.diagnostic.services.DiagnosticDatabaseService;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class DiagnosticDatabaseServiceImpl implements DiagnosticDatabaseService {
    @Autowired
    private MongoTemplate mongoTemplate;

    protected DatabaseOperation getDatabaseOperation(DatabaseOperationType databaseOperationType, LatencyTest latencyTest) {
        long latency = -1L;
        try {
            latency = latencyTest.getLatency();
        } catch (Exception e) {
            return new DatabaseOperation(Rating.FAILED, databaseOperationType, latency, e.getLocalizedMessage());
        }

        return new DatabaseOperation(Rating.IDEAL, databaseOperationType, latency);
    }

    protected Database getDatabase(List<DatabaseOperation> databaseOperations) {
        final Repository repository = new Repository(Rating.IDEAL, "art", databaseOperations);
        return new Database(Rating.IDEAL, Collections.singletonList(repository));
    }

    protected DatabaseOperation getReadDatabaseOperation(final MongoDBHealthCheck mongoDBHealthCheck) {
        return getDatabaseOperation(DatabaseOperationType.READ, new LatencyTest() {
            @Override
            public long getLatency() throws Exception {
                return mongoDBHealthCheck.readsLatency();
            }
        });
    }

    protected DatabaseOperation getWriteDatabaseOperation(final MongoDBHealthCheck mongoDBHealthCheck) {
        return getDatabaseOperation(DatabaseOperationType.WRITE, new LatencyTest() {
            @Override
            public long getLatency() throws Exception {
                return mongoDBHealthCheck.writesLatency();
            }
        });
    }

    @Override
    public Database readLevelTest() {
        final MongoDBHealthCheck mongoDBHealthCheck = new MongoDBHealthCheck(mongoTemplate);
        final DatabaseOperation readDatabaseOperation = getReadDatabaseOperation(mongoDBHealthCheck);

        return getDatabase(Collections.singletonList(readDatabaseOperation));
    }

    @Override
    public Database writeLevelTest() {
        final MongoDBHealthCheck mongoDBHealthCheck = new MongoDBHealthCheck(mongoTemplate);
        final DatabaseOperation readDatabaseOperation = getReadDatabaseOperation(mongoDBHealthCheck);
        final DatabaseOperation writeDatabaseOperation = getWriteDatabaseOperation(mongoDBHealthCheck);

        return getDatabase(Arrays.asList(readDatabaseOperation, writeDatabaseOperation));
    }
}
