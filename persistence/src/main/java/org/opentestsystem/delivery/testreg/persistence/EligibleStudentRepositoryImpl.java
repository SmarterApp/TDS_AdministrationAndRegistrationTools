/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.delivery.testreg.persistence;

import static org.springframework.data.mongodb.core.query.Criteria.where;

import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.bson.types.ObjectId;
import org.opentestsystem.delivery.testreg.domain.EligibleStudent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

public class EligibleStudentRepositoryImpl implements EligibleStudentRepositoryCustom {

    @Autowired
    private MongoOperations mongoOperations;

    @Override
    public EligibleStudent findByStudentMongoId(final String studentMongoId) {
        Query query = new Query();
        query.addCriteria(where("student.id").is(new ObjectId(studentMongoId)));
        return mongoOperations.findOne(query, EligibleStudent.class);
    }

    @Override
    public EligibleStudent findByStudentIdAndState(final String studentId, final String state) {
        Query query = new Query();
        query.addCriteria(where("student.entityId").is(studentId).and("student.stateAbbreviation").is(state));
        return mongoOperations.findOne(query, EligibleStudent.class);
    }

    @Override
    public List<EligibleStudent> findByAcademicYearAndType(final String academicYear, final String[] types,
            final String eligStudentMongoId, final String sortCol, final int pageSize) {

        Query query = new Query();
        query.addCriteria(
                where("assessments.academicYear").is(academicYear).and("assessments.type").in((Object[]) types)
                .and("_id").gt(new ObjectId(eligStudentMongoId))).with(new Sort(sortCol)).limit(pageSize);

        return mongoOperations.find(query, EligibleStudent.class);
    }

    @Override
    public long countByAcademicYearAndType(final String academicYear, final String[] types) {
        Query query = new Query();
        query.addCriteria(where("assessments.academicYear").is(academicYear).and("assessments.type")
                .in((Object[]) types));

        return mongoOperations.count(query, EligibleStudent.class);
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<String> findUniqueAcademicYears() {

        return mongoOperations.getCollection("eligibleStudent").distinct("assessments.academicYear");
    }

    @Override
    public long countByAssessmentMongoId(final String assessmentMongoId) {
        Query query = new Query();
        query.addCriteria(where("assessments.id").is(new ObjectId(assessmentMongoId)));

        return mongoOperations.count(query, EligibleStudent.class);
    }

    @Override
    public List<EligibleStudent> findByAssessmentMongoId(final String assessmentMongoId, final Pageable page) {

        Query query = new Query();
        query.addCriteria(where("assessments.id").is(new ObjectId(assessmentMongoId))).with(page);

        return mongoOperations.find(query, EligibleStudent.class);
    }

    @Override
    public boolean findAtLeastOneEligibleStudent(final String assessmentId) {
        if (StringUtils.isEmpty(assessmentId)) {
            return false;
        } else {
            return mongoOperations.exists(
                    new Query(new Criteria().andOperator(where("assessments._id").is(new ObjectId(assessmentId))))
                    , EligibleStudent.class);
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<String> findByIdInstitutionIdAndAssessmentId(final String institutionEntityMongoId,
            final String assessmentId) {
        Query query = new Query();
        query.addCriteria(where("student.institutionEntityMongoId").is(institutionEntityMongoId)
                .and("assessments._id").is(new ObjectId(assessmentId)));
        return mongoOperations.getCollection("eligibleStudent").distinct("student.entityId", query.getQueryObject());

    }

    @Override
    public List<EligibleStudent> findByInstitutionIdAndAssessmentId(final String institutionEntityMongoId,
            final String assessmentId) {
        Query query = new Query();
        query.addCriteria(where("student.institutionEntityMongoId").is(institutionEntityMongoId)
                .and("assessments._id").is(new ObjectId(assessmentId)));
        query.fields().exclude("assessments");
        return mongoOperations.find(query, EligibleStudent.class);

    }

    @Override
    public List<EligibleStudent> findByStudentInstitutionEntityMongoId(final String institutionEntityMongoId) {
        Query query = new Query();
        query.addCriteria(where("student.institutionEntityMongoId").is(institutionEntityMongoId));
        return mongoOperations.find(query, EligibleStudent.class);

    }

    @Override
    public void dropCollection() {

        mongoOperations.dropCollection(EligibleStudent.class);

    }

}
