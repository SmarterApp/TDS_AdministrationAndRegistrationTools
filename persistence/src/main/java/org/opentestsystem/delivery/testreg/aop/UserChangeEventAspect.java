/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.delivery.testreg.aop;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.opentestsystem.delivery.testreg.domain.FormatType;
import org.opentestsystem.delivery.testreg.domain.SSOAction;
import org.opentestsystem.delivery.testreg.domain.User;
import org.opentestsystem.delivery.testreg.domain.UserChangeEvent;
import org.opentestsystem.delivery.testreg.persistence.UserRepository;
import org.opentestsystem.delivery.testreg.service.TestRegPersister;
import org.opentestsystem.delivery.testreg.service.UserChangeEventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;



@Component
@Aspect
public class UserChangeEventAspect {

    @Autowired
    private UserChangeEventService userChangeEventService;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TestRegPersister userService;

    // Pointcut for <S extends T> S save(S entity);
    @Around("execution(* org.opentestsystem.delivery.testreg.persistence.UserRepository+.save(..)) && args(userIn)")
    public User save(final ProceedingJoinPoint pjp, final User userIn) throws Throwable {
        SSOAction action = SSOAction.ADD;

        if (userIn.getId() != null) {
            final User existingUser = userRepository.findOne(userIn.getId());
            if (existingUser == null) {
                throw new IllegalStateException(String.format("Could not find a user account for id %s (email: %s)",
                        userIn.getId(),
                        userIn.getEmail()));
            }

            // If the user account looks the same in the database as it does after it's been modified, exit (because
            // there's no change required).
            if (existingUser.isSameAs(userIn)) {
                return userIn;
            }

            action = SSOAction.MOD;
        }

        final User userOut = (User) pjp.proceed();
        saveUserChangeEvent(new UserChangeEvent(userIn.getId(), action));

        return userOut;
    }

    // Pointcut for <S extends T> Iterable<S> save(Iterable<S> entities);
    @Around("execution(* org.opentestsystem.delivery.testreg.persistence.UserRepository+.save(..)) && args(usersIn)")
    public Iterable<User> save(final ProceedingJoinPoint pjp, final Iterable<User> usersIn) throws Throwable {

        // loop thru and create MOD change events for existing users
        List<UserChangeEvent> userChangeEvents = new ArrayList<>();
        for (User userIn : usersIn) {
            if (userIn.getId() != null) {
                userChangeEvents.add(new UserChangeEvent(userIn.getId(), SSOAction.MOD));
            }
        }

        // loop over the list that is returned from the caller and find all new users
        @SuppressWarnings("unchecked")
        Iterable<User> usersOut = (Iterable<User>) pjp.proceed();
        for (User userOut : usersOut) {
            boolean found = false;
            for (UserChangeEvent userChangeEvent : userChangeEvents) {
                if (userChangeEvent.getModifiedUserId().equals(userOut.getId())) {
                    found = true;
                }
            }
            if (!found) {
                userChangeEvents.add(new UserChangeEvent(userOut.getId(), SSOAction.ADD));
            }
        }

        // finally write all our change events to the db
        saveUserChangeEvents(userChangeEvents);
        return usersOut;
    }

    // Pointcut for void delete(T entity);
    @AfterReturning(pointcut = "execution(* org.opentestsystem.delivery.testreg.persistence.UserRepository+.delete(..)) && args(userIn)")
    public void delete(final User userIn) {
        saveUserChangeEvent(new UserChangeEvent(userIn.getId(), SSOAction.DEL));
    }

    // Pointcut for void delete(ID id);
    @AfterReturning("execution(* org.opentestsystem.delivery.testreg.persistence.UserRepository+.delete(..)) && args(id)")
    public void delete(final String id) {
        saveUserChangeEvent(new UserChangeEvent(id, SSOAction.DEL));
    }

    // Pointcut for void delete(Iterable<? extends T> entities);
    @AfterReturning(pointcut = "execution(* org.opentestsystem.delivery.testreg.persistence.UserRepository+.delete(..)) && args(usersIn)")
    public void delete(final Iterable<User> usersIn) {
        for (User userIn : usersIn) {
            saveUserChangeEvent(new UserChangeEvent(userIn.getId(), SSOAction.DEL));
        }
    }

    // Pointcut for void deleteAll();
    @Around("execution(* org.opentestsystem.delivery.testreg.persistence.UserRepository+.deleteAll())")
    public void deleteAll(final ProceedingJoinPoint pjp) throws Throwable {
        List<User> users = userService.findAll(FormatType.USER);
        pjp.proceed();
        for (User user : users) {
            saveUserChangeEvent(new UserChangeEvent(user.getId(), SSOAction.DEL));
        }
    }

    private void saveUserChangeEvent(final UserChangeEvent userChangeEvent) {
        saveUserChangeEvents(Collections.singletonList(userChangeEvent));
    }

    // after we intercept a user change, we create an event object and persist it...
    private void saveUserChangeEvents(final List<UserChangeEvent> userChangeEvents) {
        userChangeEventService.saveUserChangeEvents(userChangeEvents);
    }
}